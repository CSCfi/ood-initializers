<% if params.has_key?("refresh") %>
  <% CSCConfiguration.reset_favorite_paths %>
  <% RcloneUtil.class_variable_set(:@@extra_env, nil) %>
  <% load "config/initializers/rclone.rb" %>
  <% load "/etc/ood/config/apps/dashboard/initializers/rclone.rb" %>
<% end %>
<% api_base_url = "/pun/sys/ood-allas-auth" %>
<% project_files_url = files_path(fs: "allas-") %>
<%= render :layout => 'widgets/container', :locals => {:title => "Allas configuration" } do %>
  <div id="alerts-container"></div>
  <div id="remotes_container" class="d-none mb-3">
    <span class="font-weight-bold">Currently configured remotes:</span>
    <table id="remotes_table" class="table table-striped mb-1">
      <thead>
        <tr>
          <th scope="col">Name</th>
          <th scope="col">Type</th>
          <th scope="col">Action</th>
        </tr>
      </thead>
      <tbody>
      </tbody>
    </table>
    <p id="remotes_table_empty">No remotes have been configured.</p>
  </div>
  <div id="loading_spinner" class="text-center">
    <div class="spinner-border clearfix">
      <span class="sr-only">Loading...</span>
    </div>
    <p>Checking for existing authentication...</p>
  </div>
  <div id="add_remote_container" class="d-none">
    <span class="font-weight-bold">Generate new token for project:</span>
    <%= bootstrap_form_tag url: "#{api_base_url}/add", remote: true, html: { id: "add_project_form" } do |f| %>
      <%= f.select :project, [], { skip_label: true }, id: "project_select" %>
      <%= f.primary "Submit" %>
    <% end %>
    <div class="mt-3">
      <p class="mb-0" id="token_expiry_info">The current authentication is valid until <span id="token_expiry"></span>.</p>
      <button class="btn btn-primary" id="revoke_auth">Revoke authentication</button>
    </div>
  </div>
  <div id="auth_container" class="d-none">
    <span class="font-weight-bold">Authentication is required to generate or revoke Allas access tokens:</span>
    <p>The authentication will be valid for 8 hours. Generated Allas access tokens are valid forever.</p>
    <%= bootstrap_form_tag url: "#{api_base_url}/renew_token", remote: true, html: { id: "renew_token_form" } do |f| %>
      <%= f.password_field :password %>
      <%= f.primary "Submit" %>
    <% end %>
  </div>
<% end %>

<script>
  const API_BASE_URL = "<%= api_base_url -%>";

  function addAlert(title, content, type = "info", extra_message_title = null, extra_message_content = null) {
    const extra_message = extra_message_title && extra_message_content ? `
<details>
  <summary>${extra_message_title}</summary>
  <p class="alert-content"></p>
</details>
` : "";
    const alertHtml = `
<div class="alert alert-${type} alert-dismissible" role="alert">
<button type="button" class="close" data-dismiss="alert" aria-label="Close">
  <span aria-hidden="true">Ã—</span>
</button>
<h4>${title}</h4>
<p>
${content}
${extra_message}
</p>
</div>
    `;
    const jqAlert = $(alertHtml);
    jqAlert.find(".alert-content").text(extra_message_content);
    $("#alerts-container").empty();
    $("#alerts-container").append(jqAlert);
  }

  class APIError extends Error {
    constructor(message, response) {
      super(message);
      this.response = response;
    }
  }

  async function api_get(url, json = false) {
    const res = await fetch(`${API_BASE_URL}${url}`);
    if (res.ok) {
      return await (json ? res.json() : res.text());
    } else {
      throw new APIError(await res.text(), res);
    }
  }

  async function api_post(url, formData = {}, json = false) {
    const body = new FormData();
    for (const [key, value] of Object.entries(formData)) {
      body.append(key, value);
    }
    const res = await fetch(`${API_BASE_URL}${url}`, { body, method: "post" });
    if (res.ok) {
      return await (json ? res.json() : res.text());
    } else {
      throw new Error(await res.text());
    }
  }

  function remote_name(project) {
    return `allas-${project}`
  }

  function add_remote_link(remote) {
    const remote_url = "<%= project_files_url %>".replace("allas-", remote);
    const existing = $(`#navbar a.dropdown-item[title='${remote}'][href='${remote_url}']`);
    if (existing.length > 0) {
      return;
    }
    const link = $("<a></a>", { "class": "dropdown-item" }).attr("title", remote).attr("href", remote_url);
    const icon = $("<i></i>", { "class": "fas fa-folder fa-fw app-icon" });
    const files_dropdown = $("a.dropdown-item[title='Home Directory']").closest(".dropdown-menu");
    const html = `
    <li>
      <a title="${remote}" class="dropdown-item" href="${remote_url}">
        <i id="" class="fas fa-folder fa-fw app-icon" title="FontAwesome icon specified: folder" aria-hidden="true"></i>
        ${remote}
      </a>
    </li>`;
    files_dropdown.append(html);
  }

  function remove_remote_link(remote) {
    const remote_url = "<%= project_files_url %>".replace("allas-", remote);
    const existing = $(`#navbar a.dropdown-item[title='${remote}'][href='${remote_url}']`).closest("li").remove();
  }

  function force_refresh() {
    const url = new URL(window.location);
    const params = new URLSearchParams(url.search);
    url.searchParams.delete("refresh");
    url.searchParams.append("refresh", "");
    fetch(url);
  }

  function set_projects(projects) {
    const project_select = $("#project_select");
    project_select.empty();
    const options = projects.map((proj) => {
      const option = document.createElement("option");
      $(option).attr("value", proj.Name).text(proj.Name);
      return option
    });
    project_select.append(...options);
  }

  async function update_projects() {
    let success = false;
    try {
      const projects = await api_get("/projects", true);
      set_projects(projects);
      success = true;
    } catch (err) {
      if (!(err.response && err.response.status === 401)) {
        console.error(`Error updating list of projects: ${err.message}`)
        addAlert("Error", `An error occurred when updating the list of projects.`, "danger", "Details:", err.message);
      }
    } finally {
      $("#loading_spinner").hide();
      $("#auth_container").toggleClass("d-none", success);
      $("#add_remote_container").toggleClass("d-none", !success);
      await update_remotes(success);
    }
  }

  async function delete_remote(remote) {
    let data = { "remote": remote };
    try {
      await api_post("/delete", data);
      remove_remote_link(remote);
      force_refresh();
      addAlert("Success", `Successfully deleted ${remote}.`, "success");
      const valid_auth = $("#token_expiry_info").is(":visible");
      await update_remotes(valid_auth);
    } catch (err) {
      console.error(`Error deleting remote: ${err.message}`)
      addAlert("Error", `An error occurred when deleting the remote.`, "danger", "Details:", err.message);
    }
  }

  async function revoke_remote(remote) {
    let data = { "remote": remote };
    try {
      await api_post("/revoke_remote", data);
      remove_remote_link(remote);
      force_refresh();
      addAlert("Success", `Successfully revoked the access token for ${remote} and deleted the remote.`, "success");
      $("#confirmModal").modal("hide");
      await update_remotes(true);
    } catch (err) {
      console.error(`Error revoking token and deleting remote: ${err.message}`)
      addAlert("Error", `An error occurred when revoking token and deleting the remote.`, "danger", "Details:", err.message);
      $("#confirmModal").modal("hide");
    }
  }

  function set_remotes(remotes, revoke) {
    const table_rows = remotes.map((remote) => {
      const tr = document.createElement("tr");
      const name_td = document.createElement("td");
      $(name_td).text(remote.name);
      const type_td = document.createElement("td");
      $(type_td).text(remote.type);
      const action_td = document.createElement("td");
      const delete_button = document.createElement("button");
      $(delete_button)
        .addClass("btn btn-primary mr-1")
        .text("Delete")
        .on("click", () => delete_remote(remote.name));
      action_td.append(delete_button);
      const revoke_button = document.createElement("button");
      $(revoke_button)
        .addClass("btn btn-primary")
        .text("Revoke")
        .prop("disabled", !(revoke && remote.type.toLowerCase() === "s3"))
        .on("click",
          () => show_confirm_modal(
            "Are you sure?",
            "The S3 access key for the remote may currently be in use outside of the web interface, for example, when using Rclone or S3cmd command line tools through SSH.",
            async () => await revoke_remote(remote.name)
          ));
      action_td.append(revoke_button);
      $(tr).append(name_td, type_td, action_td);
      return tr;
    });
    const table = $("#remotes_table tbody");
    table.empty();
    table.append(...table_rows);
    $("#remotes_table_empty").toggleClass("d-none", remotes.length > 0);
  };

  async function update_remotes(revoke = false) {
    try {
      const remotes = await api_get("/remotes", true);
      set_remotes(remotes, revoke);
      $("#remotes_container").removeClass("d-none");
    } catch (err) {
      console.error(`Error updating list of remotes: ${err.message}`)
      addAlert("Error", `An error occurred when updating the list of remotes.`, "danger", "Details:", err.message);
    }
  }

  async function revoke_os_tokens() {
    try {
      await api_post("/revoke_tokens");
      update_projects();
    } catch (err) {
      console.error(`Error revoking token: ${err.message}`)
      addAlert("Error", `An error occurred when revoking the tokens`, "danger", "Details:", err.message);
      $("#confirmModal").modal("hide");
    }
  }

  async function update_expiry() {
    try {
      const expiry = await api_get("/status");
      $("#token_expiry").text(expiry);
      $("#token_validity_info").removeClass("d-none");
    } catch (err) {
      if (!(err.response && err.response.status === 401)) {
        console.error(`Error updating token expiry: ${err.message}`)
        $("#token_validity_info").addClass("d-none");
      }
    }
  }

  function show_confirm_modal(title, text, callback, confirmText = "OK", cancelText = "Cancel") {
    const modal_html = `
    <div class="modal-dialog" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">${title}</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <div class="modal-body">
          <p>${text}</p>
        </div>
        <div class="modal-footer">
          <button type="button" id="confirmButton" class="btn btn-primary">${confirmText}</button>
          <button type="button" class="btn btn-secondary" data-dismiss="modal">${cancelText}</button>
        </div>
      </div>
    </div>`

    let modal = $('#confirmModal');
    if (!modal.length) {
      $('body').append('<div class="modal" tabindex="-1" role="dialog" id="confirmModal"></div>');
      modal = $('#confirmModal');
    }
    modal.html(modal_html);
    modal.find('#confirmButton').on("click", function () {
      $(this).prop("disabled", true);
      callback().then(() => { $(this).prop("disabled", false) });
    });
    modal.modal("show");
  }

  (async function () {
    $("#revoke_auth").on("click", revoke_os_tokens);
    await Promise.all([update_projects(), update_expiry()]);
  })();

  $("#add_project_form").on("ajax:success", function(event, data) {
    const project = $("#project_select").val();
    const remote = remote_name(project);
    add_remote_link(remote);
    force_refresh();
    addAlert("Success", `Successfully configured ${remote} remote.`, "success");
    update_remotes(true);
  });
  $("#add_project_form").on("ajax:error", function(event, data) {
    const xhr = event.originalEvent.detail[2];
    const err = xhr.responseText;
    console.error(`Authentication failed: ${err}`);
    addAlert("Error", `Allas configuration failed.`, "danger", "Details:", err);
  });

  $("#renew_token_form").on("ajax:success", async function(event, data) {
    $("#auth_container").addClass("d-none");
    await Promise.all([update_projects(), update_expiry()]);
  });
  $("#renew_token_form").on("ajax:error", function(event, data) {
    const xhr = event.originalEvent.detail[2];
    const err = xhr.responseText;
    console.error(`Authentication failed: ${err}`);
    addAlert("Error", `Authentication failed, please ensure that you typed the password correctly.`, "danger", "Details:", err);
  });
</script>
