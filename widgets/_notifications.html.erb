<script>
  const style = document.createElement('style');
  style.textContent = `
     .notification {
        padding: 10px;
        margin: 10px;
        display: flex;
        flex-direction: row;
        align-items: center;
        column-gap: 10px;
      }
    .notification-warning {
        border-color: #ffab7f;
      }
    .notification-warning .progress-bar {
        background-color: #002f5f; 
      }
    .notification-info {
        border-color: #7fb2bb;
      }
    .notification-error {
        border-color: #b90729;
      }
    .notification-title {
        color: #595959;
        font-weight: 600;
        font-size: 16px;
      }
    .notification-title a {
        color: #595959;
        text-decoration: underline;
      }
    .notification-message {
        font-size: 16px;
      }
    .notification-content {
        width: 100%;
      }
    .notification-icon {
        padding: 10px;
      }
    .notification-info .notification-icon {
        color: #006779;
      }
    .notification-warning .notification-icon {
        color: #e6bf12;
      }
    .notification-error .notification-icon {
        color: #b90729;
      }
    .notifications {
        overflow-y: auto;
        border-radius: 6px;
        box-shadow: rgb(0 0 0 / 15%) 0px 10px 20px, rgb(0 0 0 / 20%) 0px 5px 5px;
        padding: 20px;
        margin-top: 20px;
        margin-bottom: 20px;
      }
    .title-underline {
        width: 44px;
        height: 4px;
        background-color: #006778;
        margin-top: 10px;
      }
    .notification-title {
        display: block;
        font-size: 14px;
        text-transform: uppercase;
        color: #595959;
        font-weight: 500;
        margin-bottom: 10px;
      }
    .warnings .notification:not(:last-child) {
        border-bottom: 2px solid #595959;
      }
  `;
  document.head.appendChild(style);
</script>
<script>
  function setNotificationsHeight() {
      let motd = $(".motd").first();
      let notifications = $("#notifications");
      if (motd && notifications) {
          notifications.height(motd.height());
        }
    }
  $(document).ready(setNotificationsHeight);
  $(window).resize(setNotificationsHeight);
</script>
<script>

  const basePath = "/pun/sys/dashboard/files/api/v1/fs/<%= Configuration.dataroot -%>";

  function updateFile(file, content, callback) {
      $.ajax({url: file,
          type: "PUT",
          contentType: "text/plain",
          data: content,
          success: callback
        });
    }

  function hideQuotaWarning(path, quotaType) {
      function hideWarning() {
          const warning = $("#notifications").find(`div[data-path="${path}"][data-type="${quotaType}"]`).first();
          warning.hide();
        }

      const file = `${basePath}/ignored_quotas.json`
      const newQuota = {path: path, type: quotaType, timestamp: Date.now()};
      $.getJSON(file)
        .done(function(data) {
            const newData = data["error_message"] == null ? data.filter( q => !(q.path == path && q.type == quotaType) ) : [];
            newData.push(newQuota);
            updateFile(file, JSON.stringify(newData), hideWarning);
          })
        .fail(function(jqXhr, textStatus, error) {
            if (error.name === "SyntaxError") {
                const newData = [newQuota];
                updateFile(file, JSON.stringify(newData), hideWarning);
              }
          });
    }

  function hideBalanceWarning(project) {
      function hideWarning() {
          const warning = $("#notifications").find(`div[data-project="${project}"]`).first();
          warning.hide();
        }

      const file = `${basePath}/ignored_balances.json`
      const newBalance = {project: project, timestamp: Date.now()};
      $.getJSON(file)
        .done(function(data) {
            const newData = data["error_message"] == null ? data.filter( q => q.project != project ) : [];
            newData.push(newBalance);
            updateFile(file, JSON.stringify(newData), hideWarning);
          })
        .fail(function(jqXhr, textStatus, error) {
            if (error.name === "SyntaxError") {
                const newData = [newBalance];
                updateFile(file, JSON.stringify(newData), hideWarning);
              }
          });
    }
</script>

<div class="notifications" id="notifications" style="height: 100px">
  <div class="notification-title">
    Notifications
    <div class="motd-title-underline"></div>
  </div>
  <div class="warnings">
    <%- CSCQuota.get.select{ |quota| quota.insufficient?(threshold: Configuration.quota_threshold ) }.sort_by(&:percent_total_usage).reverse.each do |quota| -%>
      <%= render :partial => 'widgets/quota_notification', :locals => {:quota => quota} %>
    <%- end -%>
    <% CSCBalance.get.select{ |balance| balance.insufficient?(threshold: Configuration.balance_threshold) }.sort_by(&:percent_usage).reverse.each do |balance| %>
      <%= render :partial => 'widgets/balance_notification', :locals => {:balance => balance} %>
    <% end %>
  </div>
</div>

